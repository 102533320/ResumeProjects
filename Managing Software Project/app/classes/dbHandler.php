<?php
/**********************************************
Project     : PHP-SRePS
Date Created: 14/09/2021
Description : Database Class handler for PHP-SReP. 
contributor : Justin Santoso
            : Cobie Hudson
**********************************************/
require_once("settings/config.php");
require("message.php");

/* 'inherit' (or extent in this case) a class from config.php file. */
class DB_Handler extends DB_Config{
    /* create a private var called $connection. */
    private $connection;
    
    /* initialised DB_Handler class to connect to the database. */
    function __construct(){
        /* called static function from DB_Config class to get the settings array. */
        $settings = DB_Config::getSettings();
        /* try to connect to the database, returns error when failed via PDOExecption.  */
        try{
            /* assign a PDO object to the private var called connection. */
            $this->connection = new PDO($settings['DNS'], $settings['username'], $settings['password']);
        /* catch any error generated by PDO Object and return the message back. */
        }catch(PDOException $e){
            Message::insert(Message::DANGER, "PDO EXECPTION ERROR", $e->getMessage());
        }
    }

    function disconnect(){
        /* 
        * set the PDO Object (connection) to null. (PDO's way of disconnecting the db) 
        * similar to mysqli_close() function.
        */
        $this->connection = null;
    }

    function executeQuery($query){
        /* assign PDO query object to $result. */ 
        $result = $this->connection->query($query);
        /* check if the query passed on is invalid. Drop the query and close connection if so. */
        if(!$result){
            Message::insert(Message::DANGER, "Syntax Error", "Cannot execute query of: <pre>$query</pre>");
            $this->disconnect();
            return;
        }
        /* return the $result when there is no problem. */
        return $result;
    }

    /* Check whether it can connect to the database */
    function isConnect(){
        if(!$this->connection){
            Message::insert(Message::DANGER, "Connection Error", "Cannot established conneciton to the database.");
            return false;
        }
        return true;
    }

    /* Initialised database */
    function initialise(){
        if($this->isConnect($this->connection)){
            $this->query = "CREATE TABLE IF NOT EXISTS Orders (
                orderID INT (10) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                dateCreated VARCHAR(10) NOT NULL,
                dateProcessed VARCHAR(10) NOT NULL,
                totalPrice DECIMAL(7,2) NOT NULL
                );";
            $this->executeQuery($this->query);

            $this->query = "CREATE TABLE IF NOT EXISTS Items (
                itemID INT (10) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                itemName VARCHAR (30) NOT NULL,
                itemPrice DECIMAL(7,2) NOT NULL,
                itemTotal INT (6) NOT NULL,
                itemImagePath LONGTEXT NOT NULL
                );";
            $this->executeQuery($this->query);

            $this->query = "CREATE TABLE IF NOT EXISTS OrderItems (
                orderID INT (10) NOT NULL,
                itemID INT (10) NOT NULL,
                totalSold INT (6) NOT NULL,
                FOREIGN KEY (itemID) REFERENCES Items(itemID),
                FOREIGN KEY (orderID) REFERENCES Orders(orderID)
                );";
            $this->executeQuery($this->query);

            $this->query = "CREATE TABLE IF NOT EXISTS staffLogin (
                staffID VARCHAR(6) NOT NULL,
                staffRole ENUM('ADMIN','STAFF') NOT NULL,
                staffPassword VARCHAR(25) NOT NULL,
                PRIMARY KEY (staffID)
            );";
            $this->executeQuery($this->query);
        }
    }

    function getConnection(){
        return $this->connection;
    }
}
?>